def NAMESPACE_EXISTS = 'UNKNOWN'

pipeline {

options {
timestamps ()
withAWS(credentials: 'AWSCredentialsJenkins', region: 'eu-west-1')
withKubeConfig([credentialsId: 'kubeconfig-eks' ,  serverUrl: 'https://52b5d98096ce6cc69c293741e709fec4.sk1.eu-west-1.eks.amazonaws.com'])
}

  environment {
    serverKubernetes = 'https://52B5D98096CE6CC69C293741E709FEC4.sk1.eu-west-1.eks.amazonaws.com'
    credentialKubernetes = 'kubeconfig-eks'

    registry = "harbordemo.54.73.79.60.nip.io"
    registryCredential = 'harborid'
    IMAGETAG="${env.BUILD_NUMBER}"+ "-${params.APP_NAME}" + "-${params.APP_BRANCH}"
    }



  parameters {
    string(name: 'ARGOCD_URL', defaultValue: 'argocd.tyc.vass.es')
    string(name: 'APP_NAME', defaultValue: 'java-demo')
    string(name: 'APP_PROJECT', defaultValue: 'default')
    string(name: 'APP_REPO', defaultValue: 'https://github.com/vass-engineering/Demo-cicdk8s-argocd_helm_jenkins.git')
    string(name: 'APP_BRANCH', defaultValue: 'master')
    string(name: 'VALUES_APP', defaultValue: 'valuesdev.yaml')
    string(name: 'NAMESPACE', defaultValue: 'demoargocd')
    string(name: 'CLUSTER_URL_DESTINATION', defaultValue: 'https://kubernetes.default.svc')
    string(name: 'REGISTRY', defaultValue: 'harbordemo.54.73.79.60.nip.io', description: 'Registry image')
    string(name: 'REPOSITORY', defaultValue: 'demoargocd/demoargocd', description: 'Repository image')
    choice(
        name: 'OPTIONDEPLOY',
        choices: "Deploy\nBuildAndDeploy",
        description: 'Deploy will allow you to select an imagen already built, BuildAndDeploy will build and deploy this image' )
   credentials(name: 'argocrendentials', description: 'A user to build with', defaultValue: '', credentialType: "Username with password", required: true )
  }

    agent any

    stages {

        // X) Checkout Source Code and calculate Version Numbers and Tags
        //    stage('Checkout Source') {
        //		steps {
        //			dir('app') {
        //              		  git branch: '2.3', url: "${params.URL_APP}"
        //            		}
        //          	}
        //        }


        // BUILD.1: Compile and test the code.
        stage('Compile and test the code') {
        when {
          		expression { OPTIONDEPLOY == 'BuildAndDeploy' }
             }
          steps {
             		echo 'Starting to compile and test the code'
                script {
                       sh """
                        mvn clean package -f tms-spring-boot-template-demo
                       """
               	}
          }
        }

        // BUILD.2: Build images
        stage('Building image') {
        when {
          		expression { OPTIONDEPLOY == 'BuildAndDeploy' }
             }
          steps {
            		echo 'Starting to build docker image'
            		script {
                  		 dockerImage  = docker.build("${params.REGISTRY}/" + "${params.REPOSITORY}" + ":$BUILD_NUMBER" + "-${params.APP_NAME}" + "-${params.APP_BRANCH}", "-f tms-spring-boot-template-demo/Dockerfile .")
                }
          }
        }

        // BUILD.3.1: Docker login
        stage('Docker login') {
        when {
          		expression { OPTIONDEPLOY == 'BuildAndDeploy' }
             }
          steps{
               withCredentials([usernamePassword(credentialsId: 'harborid', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
               script {
               sh """
                      docker login https://harbordemo.54.73.79.60.nip.io -u ${USERNAME} -p {PASSWORD}
               """
               }
                }
          }
        }

        // BUILD.3.2: Push images to registry
        stage('Push Image to registry') {
        when {
          		expression { OPTIONDEPLOY == 'BuildAndDeploy' }
             }
          steps{
               script {
                      docker.withRegistry( 'https://harbordemo.54.73.79.60.nip.io', registryCredential ) {
                      dockerImage.push()
                      }
               }
          }
        }



        // DEPLOY.1: Obtain images from registry.
        stage('Obtain images from registry') {
        when {
          		expression { OPTIONDEPLOY == 'Deploy' }
             }
          steps {
                echo 'Select an image to deploy'
                withCredentials([usernamePassword(credentialsId: 'harborid', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                script {
                       tags = sh(script: "curl -u  ${USERNAME}:${PASSWORD} --insecure -s  https://${params.REGISTRY}/api/v2.0/projects/demoargocd/repositories/demoargocd/artifacts | jq '.[].tags[].name' ", returnStdout: true).trim()
                }
                }
          }
        }

        // DEPLOY.2: Select images form Harbor.
        stage('Select images form Harbor') {
        when {
          		expression { OPTIONDEPLOY == 'Deploy' }
             }
          steps {
                echo 'Select an image to deploy'
                script {
                    def tag_response = input message: 'Select the image tag from the image that you want to deploy',
                    parameters: [choice(choices: "${tags}",  description: 'Select the image tag from the image that you want to deploy', name: '')]
                    env.tag_response = tag_response
                    IMAGETAG=env.tag_response
                  //  env.IMAGETAG = env.tag_response
                }

                // withEnv(["IMAGETAG=${env.tag_response}"]) { // it can override any env variable
                //  echo "IMAGETAG = ${IMAGETAG}" //
                //      }
          }
        }


        // DEPLOYMENT

        // DEPLOY.4: SetImage in VALUES_APP using  SSH GIT KEY
        stage('SetImage in VALUES_APP') {
          steps {
                echo 'SetImage in DEV'
                withCredentials([sshUserPrivateKey(credentialsId: 'GitHubFelixCent', keyFileVariable: 'SSH_KEY')]) {
                sh """
                    git remote set-url origin git@github.com:vass-engineering/Demo-cicdk8s-argocd_helm_jenkins.git
                    git checkout ${params.APP_BRANCH}
                    sed  -i  "s/tag: .*/tag: ${IMAGETAG}/g" helm_templates/helm3-java/valuesdev.yaml
                    cat helm_templates/helm3-java/valuesdev.yaml
                    git add helm_templates/helm3-java/valuesdev.yaml
                    git commit -m "Deployment  ${env.BUILD_NUMBER}"
                    git push origin master
                    """
                }
          }
        }


        // DEPLOY.5: Check if namespace exists
        stage('Check if namespace exists') {
  	      steps {
        	  	   script {
                 //withKubeConfig([credentialsId: credentialKubernetes,  serverUrl: serverKubernetes]) {
        		     NAMESPACE_EXISTS = sh (returnStdout: true, script: "kubectl get namespaces | grep -w ${params.NAMESPACE} || true")
                 //}
                 }
          }
        }

        // DEPLOY.6: Create namespace if not exists
        stage ('Create namespace') {
          when {
        	     expression { NAMESPACE_EXISTS == '' }
          }
          steps {
			      script {
              //withKubeConfig([credentialsId: credentialKubernetes,  serverUrl: serverKubernetes]) {
              sh "kubectl create namespace ${params.NAMESPACE}"
              // }
            }
         }
        }

        // DEPLOY.7: Register the  application Argo
        stage('Register the  application Argo') {
          steps {
            script {
            //withKubeConfig([credentialsId: credentialKubernetes,  serverUrl: serverKubernetes]) {
            withCredentials([usernamePassword(credentialsId: 'argocrendentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            sh """
               argocd login --grpc-web ${ARGOCD_URL} --username ${USERNAME} --password ${PASSWORD} --insecure
               argocd app create "${params.APP_NAME}" --repo  ${params.APP_REPO} --revision  ${params.APP_BRANCH}   --path helm_templates/helm3-java --dest-server   ${params.CLUSTER_URL_DESTINATION} --dest-namespace ${params.NAMESPACE} --project ${params.APP_PROJECT} --values ${params.VALUES_APP} --sync-policy automated --auto-prune  --self-heal
               """
              //}
              }
            }
         }
        }

    }
 post {
        always {
            cleanWs()
        }
    }
}

// END OF PIPELINE
